// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user-web.proto

package userweb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserWeb service

func NewUserWebEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserWeb service

type UserWebService interface {
	Login(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	Register(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	Validation(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateProfile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*UserProfileResponse, error)
	ReadProfile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*UserProfileResponse, error)
}

type userWebService struct {
	c    client.Client
	name string
}

func NewUserWebService(name string, c client.Client) UserWebService {
	return &userWebService{
		c:    c,
		name: name,
	}
}

func (c *userWebService) Login(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserWeb.Login", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWebService) Register(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserWeb.Register", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWebService) Validation(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserWeb.Validation", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWebService) UpdateProfile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*UserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserWeb.UpdateProfile", in)
	out := new(UserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWebService) ReadProfile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*UserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserWeb.ReadProfile", in)
	out := new(UserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserWeb service

type UserWebHandler interface {
	Login(context.Context, *UserRequest, *UserResponse) error
	Register(context.Context, *UserRequest, *UserResponse) error
	Validation(context.Context, *UserRequest, *UserResponse) error
	UpdateProfile(context.Context, *UserProfileRequest, *UserProfileResponse) error
	ReadProfile(context.Context, *UserProfileRequest, *UserProfileResponse) error
}

func RegisterUserWebHandler(s server.Server, hdlr UserWebHandler, opts ...server.HandlerOption) error {
	type userWeb interface {
		Login(ctx context.Context, in *UserRequest, out *UserResponse) error
		Register(ctx context.Context, in *UserRequest, out *UserResponse) error
		Validation(ctx context.Context, in *UserRequest, out *UserResponse) error
		UpdateProfile(ctx context.Context, in *UserProfileRequest, out *UserProfileResponse) error
		ReadProfile(ctx context.Context, in *UserProfileRequest, out *UserProfileResponse) error
	}
	type UserWeb struct {
		userWeb
	}
	h := &userWebHandler{hdlr}
	return s.Handle(s.NewHandler(&UserWeb{h}, opts...))
}

type userWebHandler struct {
	UserWebHandler
}

func (h *userWebHandler) Login(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserWebHandler.Login(ctx, in, out)
}

func (h *userWebHandler) Register(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserWebHandler.Register(ctx, in, out)
}

func (h *userWebHandler) Validation(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserWebHandler.Validation(ctx, in, out)
}

func (h *userWebHandler) UpdateProfile(ctx context.Context, in *UserProfileRequest, out *UserProfileResponse) error {
	return h.UserWebHandler.UpdateProfile(ctx, in, out)
}

func (h *userWebHandler) ReadProfile(ctx context.Context, in *UserProfileRequest, out *UserProfileResponse) error {
	return h.UserWebHandler.ReadProfile(ctx, in, out)
}
