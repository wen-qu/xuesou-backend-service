// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/agency-web.proto

package agencyweb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AgencyWeb service

func NewAgencyWebEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AgencyWeb service

type AgencyWebService interface {
	GetAgencies(ctx context.Context, in *GetAgenciesRequest, opts ...client.CallOption) (*GetAgenciesResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	GetAgencyDetail(ctx context.Context, in *GetAgencyDetailRequest, opts ...client.CallOption) (*GetAgencyDetailResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
}

type agencyWebService struct {
	c    client.Client
	name string
}

func NewAgencyWebService(name string, c client.Client) AgencyWebService {
	return &agencyWebService{
		c:    c,
		name: name,
	}
}

func (c *agencyWebService) GetAgencies(ctx context.Context, in *GetAgenciesRequest, opts ...client.CallOption) (*GetAgenciesResponse, error) {
	req := c.c.NewRequest(c.name, "AgencyWeb.GetAgencies", in)
	out := new(GetAgenciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyWebService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "AgencyWeb.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyWebService) GetAgencyDetail(ctx context.Context, in *GetAgencyDetailRequest, opts ...client.CallOption) (*GetAgencyDetailResponse, error) {
	req := c.c.NewRequest(c.name, "AgencyWeb.GetAgencyDetail", in)
	out := new(GetAgencyDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyWebService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AgencyWeb.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgencyWeb service

type AgencyWebHandler interface {
	GetAgencies(context.Context, *GetAgenciesRequest, *GetAgenciesResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	GetAgencyDetail(context.Context, *GetAgencyDetailRequest, *GetAgencyDetailResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
}

func RegisterAgencyWebHandler(s server.Server, hdlr AgencyWebHandler, opts ...server.HandlerOption) error {
	type agencyWeb interface {
		GetAgencies(ctx context.Context, in *GetAgenciesRequest, out *GetAgenciesResponse) error
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
		GetAgencyDetail(ctx context.Context, in *GetAgencyDetailRequest, out *GetAgencyDetailResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
	}
	type AgencyWeb struct {
		agencyWeb
	}
	h := &agencyWebHandler{hdlr}
	return s.Handle(s.NewHandler(&AgencyWeb{h}, opts...))
}

type agencyWebHandler struct {
	AgencyWebHandler
}

func (h *agencyWebHandler) GetAgencies(ctx context.Context, in *GetAgenciesRequest, out *GetAgenciesResponse) error {
	return h.AgencyWebHandler.GetAgencies(ctx, in, out)
}

func (h *agencyWebHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.AgencyWebHandler.Search(ctx, in, out)
}

func (h *agencyWebHandler) GetAgencyDetail(ctx context.Context, in *GetAgencyDetailRequest, out *GetAgencyDetailResponse) error {
	return h.AgencyWebHandler.GetAgencyDetail(ctx, in, out)
}

func (h *agencyWebHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AgencyWebHandler.Login(ctx, in, out)
}
