// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/security.proto

package security

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Security service

func NewSecurityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Security service

type SecurityService interface {
	GenerateValidation(ctx context.Context, in *GenerateValidationRequest, opts ...client.CallOption) (*GenerateValidationResponse, error)
	CheckValidation(ctx context.Context, in *CheckValidationRequest, opts ...client.CallOption) (*CheckValidationResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...client.CallOption) (*CheckTokenResponse, error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...client.CallOption) (*GenerateTokenResponse, error)
}

type securityService struct {
	c    client.Client
	name string
}

func NewSecurityService(name string, c client.Client) SecurityService {
	return &securityService{
		c:    c,
		name: name,
	}
}

func (c *securityService) GenerateValidation(ctx context.Context, in *GenerateValidationRequest, opts ...client.CallOption) (*GenerateValidationResponse, error) {
	req := c.c.NewRequest(c.name, "Security.GenerateValidation", in)
	out := new(GenerateValidationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityService) CheckValidation(ctx context.Context, in *CheckValidationRequest, opts ...client.CallOption) (*CheckValidationResponse, error) {
	req := c.c.NewRequest(c.name, "Security.CheckValidation", in)
	out := new(CheckValidationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityService) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...client.CallOption) (*CheckTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Security.CheckToken", in)
	out := new(CheckTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityService) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...client.CallOption) (*GenerateTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Security.GenerateToken", in)
	out := new(GenerateTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Security service

type SecurityHandler interface {
	GenerateValidation(context.Context, *GenerateValidationRequest, *GenerateValidationResponse) error
	CheckValidation(context.Context, *CheckValidationRequest, *CheckValidationResponse) error
	CheckToken(context.Context, *CheckTokenRequest, *CheckTokenResponse) error
	GenerateToken(context.Context, *GenerateTokenRequest, *GenerateTokenResponse) error
}

func RegisterSecurityHandler(s server.Server, hdlr SecurityHandler, opts ...server.HandlerOption) error {
	type security interface {
		GenerateValidation(ctx context.Context, in *GenerateValidationRequest, out *GenerateValidationResponse) error
		CheckValidation(ctx context.Context, in *CheckValidationRequest, out *CheckValidationResponse) error
		CheckToken(ctx context.Context, in *CheckTokenRequest, out *CheckTokenResponse) error
		GenerateToken(ctx context.Context, in *GenerateTokenRequest, out *GenerateTokenResponse) error
	}
	type Security struct {
		security
	}
	h := &securityHandler{hdlr}
	return s.Handle(s.NewHandler(&Security{h}, opts...))
}

type securityHandler struct {
	SecurityHandler
}

func (h *securityHandler) GenerateValidation(ctx context.Context, in *GenerateValidationRequest, out *GenerateValidationResponse) error {
	return h.SecurityHandler.GenerateValidation(ctx, in, out)
}

func (h *securityHandler) CheckValidation(ctx context.Context, in *CheckValidationRequest, out *CheckValidationResponse) error {
	return h.SecurityHandler.CheckValidation(ctx, in, out)
}

func (h *securityHandler) CheckToken(ctx context.Context, in *CheckTokenRequest, out *CheckTokenResponse) error {
	return h.SecurityHandler.CheckToken(ctx, in, out)
}

func (h *securityHandler) GenerateToken(ctx context.Context, in *GenerateTokenRequest, out *GenerateTokenResponse) error {
	return h.SecurityHandler.GenerateToken(ctx, in, out)
}
