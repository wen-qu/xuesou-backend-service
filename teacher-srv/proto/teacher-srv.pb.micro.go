// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/teacher-srv.proto

package teachersrv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TeacherSrv service

func NewTeacherSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TeacherSrv service

type TeacherSrvService interface {
	GetTeachers(ctx context.Context, in *GetTeachersRequest, opts ...client.CallOption) (*GetTeachersResponse, error)
	AddTeacher(ctx context.Context, in *AddTeacherRequest, opts ...client.CallOption) (*AddTeacherResponse, error)
	UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...client.CallOption) (*UpdateTeacherResponse, error)
	DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...client.CallOption) (*DeleteTeacherResponse, error)
}

type teacherSrvService struct {
	c    client.Client
	name string
}

func NewTeacherSrvService(name string, c client.Client) TeacherSrvService {
	return &teacherSrvService{
		c:    c,
		name: name,
	}
}

func (c *teacherSrvService) GetTeachers(ctx context.Context, in *GetTeachersRequest, opts ...client.CallOption) (*GetTeachersResponse, error) {
	req := c.c.NewRequest(c.name, "TeacherSrv.GetTeachers", in)
	out := new(GetTeachersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherSrvService) AddTeacher(ctx context.Context, in *AddTeacherRequest, opts ...client.CallOption) (*AddTeacherResponse, error) {
	req := c.c.NewRequest(c.name, "TeacherSrv.AddTeacher", in)
	out := new(AddTeacherResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherSrvService) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...client.CallOption) (*UpdateTeacherResponse, error) {
	req := c.c.NewRequest(c.name, "TeacherSrv.UpdateTeacher", in)
	out := new(UpdateTeacherResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherSrvService) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...client.CallOption) (*DeleteTeacherResponse, error) {
	req := c.c.NewRequest(c.name, "TeacherSrv.DeleteTeacher", in)
	out := new(DeleteTeacherResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TeacherSrv service

type TeacherSrvHandler interface {
	GetTeachers(context.Context, *GetTeachersRequest, *GetTeachersResponse) error
	AddTeacher(context.Context, *AddTeacherRequest, *AddTeacherResponse) error
	UpdateTeacher(context.Context, *UpdateTeacherRequest, *UpdateTeacherResponse) error
	DeleteTeacher(context.Context, *DeleteTeacherRequest, *DeleteTeacherResponse) error
}

func RegisterTeacherSrvHandler(s server.Server, hdlr TeacherSrvHandler, opts ...server.HandlerOption) error {
	type teacherSrv interface {
		GetTeachers(ctx context.Context, in *GetTeachersRequest, out *GetTeachersResponse) error
		AddTeacher(ctx context.Context, in *AddTeacherRequest, out *AddTeacherResponse) error
		UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, out *UpdateTeacherResponse) error
		DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, out *DeleteTeacherResponse) error
	}
	type TeacherSrv struct {
		teacherSrv
	}
	h := &teacherSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&TeacherSrv{h}, opts...))
}

type teacherSrvHandler struct {
	TeacherSrvHandler
}

func (h *teacherSrvHandler) GetTeachers(ctx context.Context, in *GetTeachersRequest, out *GetTeachersResponse) error {
	return h.TeacherSrvHandler.GetTeachers(ctx, in, out)
}

func (h *teacherSrvHandler) AddTeacher(ctx context.Context, in *AddTeacherRequest, out *AddTeacherResponse) error {
	return h.TeacherSrvHandler.AddTeacher(ctx, in, out)
}

func (h *teacherSrvHandler) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, out *UpdateTeacherResponse) error {
	return h.TeacherSrvHandler.UpdateTeacher(ctx, in, out)
}

func (h *teacherSrvHandler) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, out *DeleteTeacherResponse) error {
	return h.TeacherSrvHandler.DeleteTeacher(ctx, in, out)
}
