// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/class-srv.proto

package classsrv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ClassSrv service

func NewClassSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ClassSrv service

type ClassSrvService interface {
	ReadClassesByAgencyID(ctx context.Context, in *ReadClassRequest, opts ...client.CallOption) (*ReadClassResponse, error)
	AddClasses(ctx context.Context, in *AddClassRequest, opts ...client.CallOption) (*AddClassResponse, error)
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...client.CallOption) (*UpdateClassResponse, error)
	DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...client.CallOption) (*DeleteClassResponse, error)
}

type classSrvService struct {
	c    client.Client
	name string
}

func NewClassSrvService(name string, c client.Client) ClassSrvService {
	return &classSrvService{
		c:    c,
		name: name,
	}
}

func (c *classSrvService) ReadClassesByAgencyID(ctx context.Context, in *ReadClassRequest, opts ...client.CallOption) (*ReadClassResponse, error) {
	req := c.c.NewRequest(c.name, "ClassSrv.ReadClassesByAgencyID", in)
	out := new(ReadClassResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classSrvService) AddClasses(ctx context.Context, in *AddClassRequest, opts ...client.CallOption) (*AddClassResponse, error) {
	req := c.c.NewRequest(c.name, "ClassSrv.AddClasses", in)
	out := new(AddClassResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classSrvService) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...client.CallOption) (*UpdateClassResponse, error) {
	req := c.c.NewRequest(c.name, "ClassSrv.UpdateClass", in)
	out := new(UpdateClassResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classSrvService) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...client.CallOption) (*DeleteClassResponse, error) {
	req := c.c.NewRequest(c.name, "ClassSrv.DeleteClass", in)
	out := new(DeleteClassResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClassSrv service

type ClassSrvHandler interface {
	ReadClassesByAgencyID(context.Context, *ReadClassRequest, *ReadClassResponse) error
	AddClasses(context.Context, *AddClassRequest, *AddClassResponse) error
	UpdateClass(context.Context, *UpdateClassRequest, *UpdateClassResponse) error
	DeleteClass(context.Context, *DeleteClassRequest, *DeleteClassResponse) error
}

func RegisterClassSrvHandler(s server.Server, hdlr ClassSrvHandler, opts ...server.HandlerOption) error {
	type classSrv interface {
		ReadClassesByAgencyID(ctx context.Context, in *ReadClassRequest, out *ReadClassResponse) error
		AddClasses(ctx context.Context, in *AddClassRequest, out *AddClassResponse) error
		UpdateClass(ctx context.Context, in *UpdateClassRequest, out *UpdateClassResponse) error
		DeleteClass(ctx context.Context, in *DeleteClassRequest, out *DeleteClassResponse) error
	}
	type ClassSrv struct {
		classSrv
	}
	h := &classSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&ClassSrv{h}, opts...))
}

type classSrvHandler struct {
	ClassSrvHandler
}

func (h *classSrvHandler) ReadClassesByAgencyID(ctx context.Context, in *ReadClassRequest, out *ReadClassResponse) error {
	return h.ClassSrvHandler.ReadClassesByAgencyID(ctx, in, out)
}

func (h *classSrvHandler) AddClasses(ctx context.Context, in *AddClassRequest, out *AddClassResponse) error {
	return h.ClassSrvHandler.AddClasses(ctx, in, out)
}

func (h *classSrvHandler) UpdateClass(ctx context.Context, in *UpdateClassRequest, out *UpdateClassResponse) error {
	return h.ClassSrvHandler.UpdateClass(ctx, in, out)
}

func (h *classSrvHandler) DeleteClass(ctx context.Context, in *DeleteClassRequest, out *DeleteClassResponse) error {
	return h.ClassSrvHandler.DeleteClass(ctx, in, out)
}
