// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/agency-srv.proto

package agencysrv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AgencySrv service

func NewAgencySrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AgencySrv service

type AgencySrvService interface {
	ReadAgencyDetails(ctx context.Context, in *ReadAgencyRequest, opts ...client.CallOption) (*ReadAgencyResponse, error)
	AddAgency(ctx context.Context, in *AddAgencyRequest, opts ...client.CallOption) (*AddAgencyResponse, error)
	UpdateAgency(ctx context.Context, in *UpdateAgencyRequest, opts ...client.CallOption) (*UpdateAgencyResponse, error)
	DeleteAgency(ctx context.Context, in *DeleteAgencyRequest, opts ...client.CallOption) (*DeleteAgencyResponse, error)
}

type agencySrvService struct {
	c    client.Client
	name string
}

func NewAgencySrvService(name string, c client.Client) AgencySrvService {
	return &agencySrvService{
		c:    c,
		name: name,
	}
}

func (c *agencySrvService) ReadAgencyDetails(ctx context.Context, in *ReadAgencyRequest, opts ...client.CallOption) (*ReadAgencyResponse, error) {
	req := c.c.NewRequest(c.name, "AgencySrv.ReadAgencyDetails", in)
	out := new(ReadAgencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencySrvService) AddAgency(ctx context.Context, in *AddAgencyRequest, opts ...client.CallOption) (*AddAgencyResponse, error) {
	req := c.c.NewRequest(c.name, "AgencySrv.AddAgency", in)
	out := new(AddAgencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencySrvService) UpdateAgency(ctx context.Context, in *UpdateAgencyRequest, opts ...client.CallOption) (*UpdateAgencyResponse, error) {
	req := c.c.NewRequest(c.name, "AgencySrv.UpdateAgency", in)
	out := new(UpdateAgencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencySrvService) DeleteAgency(ctx context.Context, in *DeleteAgencyRequest, opts ...client.CallOption) (*DeleteAgencyResponse, error) {
	req := c.c.NewRequest(c.name, "AgencySrv.DeleteAgency", in)
	out := new(DeleteAgencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgencySrv service

type AgencySrvHandler interface {
	ReadAgencyDetails(context.Context, *ReadAgencyRequest, *ReadAgencyResponse) error
	AddAgency(context.Context, *AddAgencyRequest, *AddAgencyResponse) error
	UpdateAgency(context.Context, *UpdateAgencyRequest, *UpdateAgencyResponse) error
	DeleteAgency(context.Context, *DeleteAgencyRequest, *DeleteAgencyResponse) error
}

func RegisterAgencySrvHandler(s server.Server, hdlr AgencySrvHandler, opts ...server.HandlerOption) error {
	type agencySrv interface {
		ReadAgencyDetails(ctx context.Context, in *ReadAgencyRequest, out *ReadAgencyResponse) error
		AddAgency(ctx context.Context, in *AddAgencyRequest, out *AddAgencyResponse) error
		UpdateAgency(ctx context.Context, in *UpdateAgencyRequest, out *UpdateAgencyResponse) error
		DeleteAgency(ctx context.Context, in *DeleteAgencyRequest, out *DeleteAgencyResponse) error
	}
	type AgencySrv struct {
		agencySrv
	}
	h := &agencySrvHandler{hdlr}
	return s.Handle(s.NewHandler(&AgencySrv{h}, opts...))
}

type agencySrvHandler struct {
	AgencySrvHandler
}

func (h *agencySrvHandler) ReadAgencyDetails(ctx context.Context, in *ReadAgencyRequest, out *ReadAgencyResponse) error {
	return h.AgencySrvHandler.ReadAgencyDetails(ctx, in, out)
}

func (h *agencySrvHandler) AddAgency(ctx context.Context, in *AddAgencyRequest, out *AddAgencyResponse) error {
	return h.AgencySrvHandler.AddAgency(ctx, in, out)
}

func (h *agencySrvHandler) UpdateAgency(ctx context.Context, in *UpdateAgencyRequest, out *UpdateAgencyResponse) error {
	return h.AgencySrvHandler.UpdateAgency(ctx, in, out)
}

func (h *agencySrvHandler) DeleteAgency(ctx context.Context, in *DeleteAgencyRequest, out *DeleteAgencyResponse) error {
	return h.AgencySrvHandler.DeleteAgency(ctx, in, out)
}
